#!/usr/bin/env python3
"""
DECTERUM - Configura√ß√£o Autom√°tica do Cloudflare Tunnel
Script para instalar e gerenciar cloudflared
"""

import subprocess
import time
import os
import sys
import json
import requests
import threading
from urllib.parse import urlparse

class CloudflareTunnelSetup:
    def __init__(self, port=8000):
        self.port = port
        self.tunnel_url = None
        self.tunnel_process = None
        self.is_running = False
        
    def check_cloudflared_installed(self):
        """Verifica se cloudflared est√° instalado em diferentes localiza√ß√µes"""
        
        # Poss√≠veis caminhos do cloudflared
        possible_paths = [
            'cloudflared',  # PATH padr√£o
            'cloudflared.exe',  # Windows com extens√£o
            r'C:\Program Files\cloudflared\cloudflared.exe',  # Instala√ß√£o padr√£o
            r'C:\Program Files (x86)\cloudflared\cloudflared.exe',
            os.path.expanduser('~\\AppData\\Local\\Microsoft\\WinGet\\Packages\\Cloudflare.cloudflared_Microsoft.Winget.Source_8wekyb3d8bbwe\\cloudflared.exe'),
            './cloudflared.exe',  # Local
            './cloudflared'  # Local Unix
        ]
        
        for path in possible_paths:
            try:
                result = subprocess.run([path, '--version'], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    print(f"‚úÖ Cloudflared encontrado em: {path}")
                    return path
            except:
                continue
        
        # Tentar atualizar PATH e verificar novamente (Windows)
        if os.name == 'nt':
            try:
                print("üîÑ Tentando atualizar PATH do Windows...")
                # For√ßa atualiza√ß√£o das vari√°veis de ambiente
                subprocess.run(['refreshenv'], shell=True, timeout=5)
                
                # Tenta novamente ap√≥s refresh
                result = subprocess.run(['cloudflared', '--version'], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    print("‚úÖ Cloudflared encontrado ap√≥s atualiza√ß√£o do PATH")
                    return 'cloudflared'
            except:
                pass
        
        print("‚ùå Cloudflared n√£o encontrado em nenhum local")
        return None
    
    def install_cloudflared(self):
        """Instala cloudflared automaticamente"""
        print("üì¶ Instalando Cloudflared...")
        
        try:
            import platform
            system = platform.system().lower()
            
            if system == "windows":
                return self._install_windows()
            elif system == "darwin":  # macOS
                return self._install_macos()
            elif system == "linux":
                return self._install_linux()
            else:
                print(f"‚ùå Sistema {system} n√£o suportado para instala√ß√£o autom√°tica")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro na instala√ß√£o: {e}")
            return False
    
    def _install_windows(self):
        """Instala no Windows com verifica√ß√£o melhorada"""
        print("ü™ü Instalando para Windows...")
        
        try:
            # Primeiro, verificar se winget est√° dispon√≠vel
            subprocess.run(['winget', '--version'], 
                          check=True, capture_output=True, timeout=5)
            
            print("‚¨áÔ∏è Baixando via Windows Package Manager...")
            result = subprocess.run([
                'winget', 'install', '--id', 'Cloudflare.cloudflared',
                '--accept-package-agreements', '--accept-source-agreements'
            ], timeout=120, capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Instala√ß√£o via winget conclu√≠da")
                
                # Aguardar um pouco para o sistema processar
                time.sleep(2)
                
                # Verificar se foi instalado
                cloudflared_path = self.check_cloudflared_installed()
                if cloudflared_path:
                    return cloudflared_path
                else:
                    print("‚ö†Ô∏è Instala√ß√£o conclu√≠da mas comando n√£o encontrado")
                    print("üí° Reinicie o PowerShell e tente novamente")
                    return False
            else:
                print(f"‚ùå Erro no winget: {result.stderr}")
                return self._install_windows_manual()
                
        except subprocess.CalledProcessError:
            print("‚ùå Winget n√£o dispon√≠vel, tentando instala√ß√£o manual...")
            return self._install_windows_manual()
        except Exception as e:
            print(f"‚ùå Erro na instala√ß√£o: {e}")
            return self._install_windows_manual()
    
    def _install_windows_manual(self):
        """Instala√ß√£o manual para Windows"""
        print("üìÅ Fazendo download manual...")
        
        try:
            import urllib.request
            
            # URL do release mais recente
            url = "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe"
            local_file = "cloudflared.exe"
            
            print(f"‚¨áÔ∏è Baixando de: {url}")
            urllib.request.urlretrieve(url, local_file)
            
            # Tornar execut√°vel
            os.chmod(local_file, 0o755)
            
            print(f"‚úÖ Download conclu√≠do: {local_file}")
            return f"./{local_file}"
            
        except Exception as e:
            print(f"‚ùå Erro no download: {e}")
            return False
    
    def _install_macos(self):
        """Instala no macOS"""
        print("üçé Instalando para macOS...")
        try:
            subprocess.run(['brew', 'install', 'cloudflare/cloudflare/cloudflared'], 
                          check=True, timeout=60)
            return 'cloudflared'
        except:
            print("‚ùå Homebrew n√£o encontrado. Instale manualmente:")
            print("   brew install cloudflare/cloudflare/cloudflared")
            return False
    
    def _install_linux(self):
        """Instala no Linux"""
        print("üêß Instalando para Linux...")
        try:
            # Tentar Ubuntu/Debian
            subprocess.run(['curl', '-L', '--output', 'cloudflared.deb', 
                          'https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb'], 
                          check=True, timeout=30)
            subprocess.run(['sudo', 'dpkg', '-i', 'cloudflared.deb'], 
                          check=True, timeout=30)
            return 'cloudflared'
        except:
            try:
                # Download direto
                import urllib.request
                url = "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64"
                urllib.request.urlretrieve(url, "cloudflared")
                os.chmod("cloudflared", 0o755)
                print("üìÅ Baixado cloudflared")
                return "./cloudflared"
            except Exception as e:
                print(f"‚ùå Erro no download: {e}")
                return False
    
    def start_quick_tunnel(self, cloudflared_cmd):
        """Inicia t√∫nel r√°pido (sem login)"""
        print(f"üåê Configurando t√∫nel para porta {self.port}...")
        
        try:
            cmd = [
                cloudflared_cmd, 'tunnel', 
                '--url', f'http://localhost:{self.port}',
                '--no-autoupdate'
            ]
            
            print(f"üöÄ Executando: {' '.join(cmd)}")
            
            # Iniciar processo
            self.tunnel_process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                universal_newlines=True
            )
            
            self.is_running = True
            
            # Aguardar URL do t√∫nel
            return self._wait_for_tunnel_url()
            
        except Exception as e:
            print(f"‚ùå Erro ao iniciar t√∫nel: {e}")
            return None
    
    def _wait_for_tunnel_url(self, timeout=30):
        """Aguarda e extrai URL do t√∫nel"""
        print("‚è≥ Aguardando URL do t√∫nel...")
        
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            if self.tunnel_process.poll() is not None:
                # Processo morreu
                try:
                    stdout, stderr = self.tunnel_process.communicate(timeout=2)
                    print(f"‚ùå Processo falhou:")
                    print(f"   stdout: {stdout}")
                    print(f"   stderr: {stderr}")
                except:
                    pass
                return None
            
            # Ler stderr linha por linha
            try:
                line = self.tunnel_process.stderr.readline()
                if line:
                    print(f"   Log: {line.strip()}")
                    
                    # Procurar URL do tipo trycloudflare.com
                    if 'trycloudflare.com' in line and 'https://' in line:
                        # Extrair URL
                        parts = line.split()
                        for part in parts:
                            if 'trycloudflare.com' in part and part.startswith('https://'):
                                self.tunnel_url = part.strip()
                                print(f"‚úÖ T√∫nel ativo: {self.tunnel_url}")
                                return self.tunnel_url
            except:
                pass
            
            time.sleep(0.5)
        
        print("‚ö†Ô∏è Timeout aguardando URL do t√∫nel")
        return None
    
    def test_tunnel(self):
        """Testa se o t√∫nel est√° funcionando"""
        if not self.tunnel_url:
            return False
            
        try:
            print(f"üß™ Testando t√∫nel: {self.tunnel_url}")
            response = requests.get(f"{self.tunnel_url}/api/status", timeout=10)
            
            if response.status_code == 200:
                print("‚úÖ T√∫nel funcionando corretamente!")
                return True
            else:
                print(f"‚ùå T√∫nel retornou status: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro testando t√∫nel: {e}")
            return False
    
    def stop_tunnel(self):
        """Para o t√∫nel"""
        self.is_running = False
        
        if self.tunnel_process:
            try:
                print("üõë Parando t√∫nel...")
                self.tunnel_process.terminate()
                self.tunnel_process.wait(timeout=5)
                print("‚úÖ T√∫nel parado")
            except:
                try:
                    self.tunnel_process.kill()
                    print("‚ö†Ô∏è T√∫nel for√ßado a parar")
                except:
                    print("‚ùå Erro parando t√∫nel")
            finally:
                self.tunnel_process = None
    
    def run_in_background(self):
        """Executa t√∫nel em background"""
        def monitor():
            while self.is_running and self.tunnel_process:
                if self.tunnel_process.poll() is not None:
                    print("‚ö†Ô∏è T√∫nel parou inesperadamente")
                    break
                time.sleep(10)
        
        thread = threading.Thread(target=monitor, daemon=True)
        thread.start()
    
    def get_share_info(self):
        """Retorna informa√ß√µes para compartilhar"""
        if not self.tunnel_url:
            return None
            
        return {
            "tunnel_url": self.tunnel_url,
            "local_url": f"http://localhost:{self.port}",
            "instructions": [
                "Compartilhe este link com seus amigos:",
                f"üåê {self.tunnel_url}",
                "",
                "Ou acesse localmente:",
                f"üè† http://localhost:{self.port}"
            ]
        }

def main():
    print("üåü DECTERUM - Configura√ß√£o do Cloudflare Tunnel")
    print("=" * 50)
    
    # Obter porta
    port = 8000
    if len(sys.argv) > 1:
        try:
            port = int(sys.argv[1])
        except:
            pass
    
    setup = CloudflareTunnelSetup(port)
    
    # Verificar se cloudflared est√° instalado
    cloudflared_path = setup.check_cloudflared_installed()
    
    if not cloudflared_path:
        print("\n‚ùì Cloudflared n√£o encontrado. Op√ß√µes:")
        print("1. Instalar automaticamente")
        print("2. Reiniciar PowerShell e tentar novamente")
        print("3. Instalar manualmente")
        
        response = input("Digite '1', '2' ou '3': ").strip()
        
        if response == '1':
            cloudflared_path = setup.install_cloudflared()
            if not cloudflared_path:
                print("\n‚ùå N√£o foi poss√≠vel instalar automaticamente")
                print("üí° Solu√ß√µes:")
                print("   1. Reinicie o PowerShell e execute: python setup_cloudflare.py")
                print("   2. Instale manualmente: winget install Cloudflare.cloudflared")
                print("   3. Execute este script em um novo terminal")
                sys.exit(1)
        elif response == '2':
            print("\nüí° Reinicie o PowerShell e execute:")
            print("   python setup_cloudflare.py")
            sys.exit(0)
        else:
            print("\nüí° Instale manualmente:")
            print("   Windows: winget install Cloudflare.cloudflared")
            print("   macOS:   brew install cloudflare/cloudflare/cloudflared")  
            print("   Linux:   https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation/")
            sys.exit(1)
    
    # Verificar se DECTERUM est√° rodando
    try:
        response = requests.get(f"http://localhost:{port}/api/status", timeout=5)
        if response.status_code != 200:
            print(f"‚ö†Ô∏è DECTERUM n√£o est√° respondendo na porta {port}")
            print("üí° Certifique-se de que est√° rodando: python app.py")
            sys.exit(1)
    except requests.exceptions.ConnectionError:
        print(f"‚ùå DECTERUM n√£o est√° rodando na porta {port}")
        print("üí° Inicie primeiro: python app.py")
        sys.exit(1)
    
    # Iniciar t√∫nel
    tunnel_url = setup.start_quick_tunnel(cloudflared_path)
    
    if tunnel_url:
        # Testar t√∫nel
        if setup.test_tunnel():
            # Mostrar informa√ß√µes
            info = setup.get_share_info()
            if info:
                print("\nüéâ T√∫nel configurado com sucesso!")
                print("=" * 50)
                for line in info["instructions"]:
                    print(line)
                print("=" * 50)
                
                # Executar em background
                setup.run_in_background()
                
                try:
                    print("\n‚å®Ô∏è Pressione Ctrl+C para parar o t√∫nel")
                    while setup.is_running:
                        time.sleep(1)
                except KeyboardInterrupt:
                    print("\nüõë Parando t√∫nel...")
                    setup.stop_tunnel()
        else:
            print("‚ùå T√∫nel n√£o est√° respondendo corretamente")
            setup.stop_tunnel()
    else:
        print("‚ùå N√£o foi poss√≠vel configurar o t√∫nel")
        print("üí° Poss√≠veis solu√ß√µes:")
        print("   ‚Ä¢ Verifique se o DECTERUM est√° rodando na porta", port)
        print("   ‚Ä¢ Tente uma porta diferente")
        print("   ‚Ä¢ Verifique sua conex√£o com a internet")
        print("   ‚Ä¢ Reinicie o PowerShell e tente novamente")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë Configura√ß√£o cancelada")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)
